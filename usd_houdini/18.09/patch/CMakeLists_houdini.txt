if (APPLE)   
    message(WARNING "Skipping third_party/houdini because the Houdini plugin is not supported on MacOS")
    return()
elif (WIN32)
    message(WARNING "Skipping third_party/houdini because the Houdini plugin is not supported on Windows")
    return()
endif()

set(PXR_INSTALL_SUBDIR "third_party/houdini")

message(888 ${HOUDINI_INCLUDE_DIRS})

######################################################################
# standalone plugin build, build the katna plugin without building core 
# US libs and binaries.  
#
# eg:
# cmake -DPXR_BUILD_USD=OFF -DUSD_INCLUDE_DIR=$REZ_USD_ROOT/include -DUSD_LIB_DIR=$REZ_USD_ROOT/lib ..
if (NOT ${PXR_BUILD_USD})

    string(COMPARE EQUAL "${USD_INCLUDE_DIR}" "" NO_USD_INCLUDE_DIR)
    string(COMPARE EQUAL "${USD_LIB_DIR}" "" NO_USD_LIB_DIR)

    if (${NO_USD_INCLUDE_DIR} OR ${NO_USD_LIB_DIR})
        message(ERROR "Cannot build standalone katana plugin without USD_INCLUDE_DIR and USE_LIB_DIR being set")
	return()
    endif()
    include_directories(${USD_INCLUDE_DIR} ${Boost_INCLUDE_DIRS} ${TBB_INCLUDE_DIRS} ${HOUDINI_INLCUDE_DIRS})
    link_directories(${USD_LIB_DIR})
endif()
######################################################################

pxr_add_extra_plugins(plugin)

add_definitions( 
    -DHOUDINI_API_VERSION=${HOUDINI_MAJOR_VERSION}${HOUDINI_MINOR_VERSION}
    -DVERSION="${HOUDINI_VERSION}"
    -DHOUDINI_DOT_VERSION=${HOUDINI_BUILD_VERSION} )

add_definitions(  -fpermissive -D_GNU_SOURCE -DLINUX -DAMD64 -DSIZEOF_VOID_P=8 -DFBX_ENABLED=1 -DOPENCL_ENABLED=1 -DOPENVDB_ENABLED=1 
-DMAKING_DSO -DSESI_LITTLE_ENDIAN -DENABLE_THREADS -DUSE_PTHREADS -D_REENTRANT -D_FILE_OFFSET_BITS=64 -DGCC4 -DGCC3 
-Wall -Wno-parentheses -Wno-sign-compare -Wno-reorder -Wno-uninitialized -Wunused -Wno-unused-parameter -Wno-unused-local-typedefs -Wno-empty-body -fno-strict-aliasing )

add_subdirectory(lib)
add_subdirectory(plugin)
